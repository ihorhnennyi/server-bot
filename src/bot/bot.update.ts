import { Inject } from '@nestjs/common'
import { Command, Ctx, Start, Update } from 'nestjs-telegraf'
import { Context } from 'telegraf'
import { SSHService } from '../ssh/ssh.service'
import { isFreshMessage } from './helpers/is-fresh-message'

@Update()
export class BotUpdate {
	constructor(
		@Inject(SSHService)
		private readonly sshService: SSHService
	) {}

	@Start()
	async onStart(@Ctx() ctx: Context) {
		if (!isFreshMessage(ctx)) return
		await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏ üíª')
	}

	@Command('status')
	async onStatus(@Ctx() ctx: Context) {
		if (!isFreshMessage(ctx)) return
		await ctx.reply('üîÑ –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...')

		try {
			const output = await this.sshService.executeCommand('uptime')
			await ctx.reply(`üì° *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:*\n\`\`\`\n${output}\n\`\`\``, {
				parse_mode: 'Markdown',
			})
		} catch (error: any) {
			await this.replyWithError(ctx, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞', error)
		}
	}

	@Command('reboot')
	async onReboot(@Ctx() ctx: Context) {
		if (!isFreshMessage(ctx)) return
		await ctx.reply('‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é —Å–µ—Ä–≤–µ—Ä...')

		try {
			const output = await this.sshService.executeCommand('sudo reboot')
			await ctx.reply(
				`‚úÖ –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.\n\`\`\`\n${output}\n\`\`\``,
				{
					parse_mode: 'Markdown',
				}
			)
		} catch (error: any) {
			await this.replyWithError(ctx, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ', error)
		}
	}

	@Command('shutdown')
	async onShutdown(@Ctx() ctx: Context) {
		if (!isFreshMessage(ctx)) return
		await ctx.reply('‚èπÔ∏è –í—ã–∫–ª—é—á–∞—é —Å–µ—Ä–≤–µ—Ä...')

		try {
			const output = await this.sshService.executeCommand('sudo shutdown now')
			await ctx.reply(`üîå –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω.\n\`\`\`\n${output}\n\`\`\``, {
				parse_mode: 'Markdown',
			})
		} catch (error: any) {
			await this.replyWithError(ctx, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏', error)
		}
	}

	private async replyWithError(ctx: Context, message: string, error: any) {
		await ctx.reply(
			`‚ùå ${message}:\n\`\`\`\n${error?.message ?? error}\n\`\`\``,
			{
				parse_mode: 'Markdown',
			}
		)
	}
}
