import { Inject } from '@nestjs/common'
import { Action, Command, Ctx, Hears, Start, Update } from 'nestjs-telegraf'
import { Context, Markup } from 'telegraf'
import { SSHService } from '../ssh/ssh.service'
import { isFreshMessage } from './helpers/is-fresh-message'

@Update()
export class BotUpdate {
	constructor(@Inject(SSHService) private readonly sshService: SSHService) {}

	@Start()
	async onStart(@Ctx() ctx: Context) {
		if (!isFreshMessage(ctx)) return

		await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏ üíª', {
			reply_markup: {
				keyboard: [['üìã –ú–µ–Ω—é']],
				resize_keyboard: true,
				one_time_keyboard: true,
			},
		})
	}

	@Hears('üìã –ú–µ–Ω—é')
	async onMenu(@Ctx() ctx: Context) {
		await ctx.reply(
			'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
			Markup.inlineKeyboard([
				[Markup.button.callback('üì° –°—Ç–∞—Ç—É—Å', 'status')],
				[
					Markup.button.callback('‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞', 'reboot'),
					Markup.button.callback('‚èπÔ∏è –í—ã–∫–ª—é—á–µ–Ω–∏–µ', 'shutdown'),
				],
				[Markup.button.callback('üìã –ò–Ω—Ñ–æ', 'info')],
			])
		)
	}

	@Action('status')
	async handleStatus(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		await ctx.reply('üîÑ –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...')
		try {
			const output = await this.sshService.executeCommand('uptime')
			await ctx.reply(`üì° *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:*\n\`\`\`\n${output}\n\`\`\``, {
				parse_mode: 'Markdown',
			})
		} catch (error: any) {
			await this.replyWithError(ctx, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞', error)
		}
	}

	@Action('reboot')
	async handleReboot(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		await ctx.reply('‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é —Å–µ—Ä–≤–µ—Ä...')
		try {
			const output = await this.sshService.executeCommand('sudo reboot')
			await ctx.reply(
				`‚úÖ –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.\n\`\`\`\n${output}\n\`\`\``,
				{ parse_mode: 'Markdown' }
			)
		} catch (error: any) {
			await this.replyWithError(ctx, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ', error)
		}
	}

	@Action('shutdown')
	async handleShutdown(@Ctx() ctx: Context) {
		await ctx.answerCbQuery()
		await ctx.reply('‚èπÔ∏è –í—ã–∫–ª—é—á–∞—é —Å–µ—Ä–≤–µ—Ä...')
		try {
			const output = await this.sshService.executeCommand('sudo shutdown now')
			await ctx.reply(`üîå –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω.\n\`\`\`\n${output}\n\`\`\``, {
				parse_mode: 'Markdown',
			})
		} catch (error: any) {
			await this.replyWithError(ctx, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏', error)
		}
	}

	@Command('info')
	@Action('info')
	async handleInfo(@Ctx() ctx: Context) {
		await ctx.reply('‚ÑπÔ∏è –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ...')
		try {
			const output = await this.sshService.executeCommand(
				`
echo "üñ•Ô∏è Hostname: $(hostname)"
echo "üåê IP: $(hostname -I | awk '{print $1}')"
echo "üìà Uptime: $(uptime -p)"
echo "üß† CPU cores: $(nproc)"
echo "üíæ Disk usage:"
df -h /
echo "üßÆ Memory usage:"
free -h
			`
			)
			await ctx.reply(
				`üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:*\n\`\`\`\n${output.trim()}\n\`\`\``,
				{
					parse_mode: 'Markdown',
				}
			)
		} catch (error: any) {
			await this.replyWithError(ctx, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', error)
		}
	}

	private async replyWithError(ctx: Context, message: string, error: any) {
		await ctx.reply(
			`‚ùå ${message}:\n\`\`\`\n${error?.message ?? error}\n\`\`\``,
			{ parse_mode: 'Markdown' }
		)
	}
}
